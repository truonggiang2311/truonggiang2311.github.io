//1. Vi·∫øt h√†m t·∫°o Weapon v·ªõi c√°c thu·ªôc t√≠nh name, damage, ...
let weapon = {
    name: "sword",
    damage: 1000,
    color: "black"
}
weapon;

//2. Vi·∫øt h√†m t·∫°o Player v·ªõi c√°c thu·ªôc t√≠nh name, level, weapon, weapon object kh·ªüi t·∫°o t·ª´ Weapon. Player c√≥ c√°c methods:
//attack() t√≠nh v√† in ra m√†n h√¨nh l∆∞·ª£ng s√°t th∆∞∆°ng g√¢y ra = weapon.damage * level
//changeWeapon() thay ƒë·ªïi weapon c·ªßa Player
let weapon = {
    name: "kiem",
    damage: 1000,
    color: "den"
}

let player = {
    name: "Giang",
    level: 100,
    weapon: weapon,
    attack() {
        return this.weapon.damage * this.level
    },
    changeWeapon() {
        return weapon = {
            name: "sung",
            damage: 2000,
            color: "xanh"
        }
    }
}
player.changeWeapon()

// T·∫°o m·ªôt v√†i ƒë·ªëi t∆∞·ª£ng t·ª´ Player v√† Weapon, g·ªçi ph∆∞∆°ng th·ª©c attack() tr√™n c√°c ƒë·ªëi t∆∞·ª£ng ƒë√≥
function Weapon(name,damage,color) {
    this.name = name;
    this.damage = damage;
    this.color = color;
}
let dao = new Weapon("dao", 500, "vang");
let thuong = new Weapon("thuong", 1500, "xam");
let bom = new Weapon("bom", 5000, "do");
let cung = new Weapon("cung", 700, "cam")

function Player(name, level, Weapon)  {
    this.name = name;
    this.level = level;
    this.Weapon = Weapon;
    this.attack = function () {
        return this.Weapon.damage * this.level
    }
}
let Player1 = new Player("Player1", 200, dao)
let Player2 = new Player("Player2", 300, thuong)
let Player3 = new Player("Player3", 400, bom)
let Player4 = new Player("Player4", 100, cung)

Player1.attack();

// //T·∫°o m·ªôt object calculator, c√≥ c√°c thu·ªôc t√≠nh a, b l√† 2 s·ªë, v√† c√°c ph∆∞∆°ng th·ª©c:
// get(a, b) tham s·ªë nh·∫≠n v√†o l√† 2 s·ªë a, b
// add() tr·∫£ v·ªÅ t·ªïng a + b
// sub() tr·∫£ v·ªÅ hi·ªáu a - b
// div(), mul(), rem(), exp(), ‚Ä¶ tr·∫£ v·ªÅ k·∫øt qu·∫£ ph√©p t√≠nh t∆∞∆°ng ·ª©ng
// L√†m th·∫ø n√†o ƒë·ªÉ cho ph√©p g·ªçi h√†m theo chu·ªói VD cal.get(4,5).add(); // 9
let calculator = {
    a: 1,
    b: 2,
    get(a, b) {
        a = this.a; 
        b = this.b;
        console.log(`get(${a},${b})`);
    },
    add() {
       return this.a + this.b;
    },
    sub() {
        return this.a-this.b
    },
    div() {
        return this.a / this.b
    },
    mul() {
       return this.a * this.b 
    },
    rem() {
        return this.a /this.b *100 
    },
    exp() {
        console.log(Math.exp(this.a));
        console.log(Math.exp(this.b));
    }
};
calculator.add();


// //Vi·∫øt h√†m t·∫°o Counter, c√≥ thu·ªôc t√≠nh count, v√† c√°c ph∆∞∆°ng th·ª©c
// count l√† tham s·ªë truy·ªÅn v√†o, m·∫∑c ƒë·ªãnh = 0
// up() tƒÉng count l√™n 1
// down() gi·∫£m count 1
// get() in ra count hi·ªán t·∫°i
// L√†m th·∫ø n√†o ƒë·ªÉ cho ph√©p g·ªçi h√†m theo chu·ªói VD counter.up().up().get().down().get();

let Counter = {
    count: 0,
    up() {
        console.log(this.count + 1);
        return this;
    },
    down() {
        console.log(this.count - 1);
        return this;
    },
    get() {
        console.log(Counter.count + Counter.up() + Counter.down())
        return this;
    }
}
Counter.up().up().get().down().get();


//Vi·∫øt h√†m t·∫°o Girl c√≥ c√°c thu·ªôc t√≠nh v√† ph∆∞∆°ng th·ª©c t√πy √Ω üòÖ
let girl = {
    height: 165,
    weight: 50,
    hair() {
        console.log("black hair")
    }
}

//Vi·∫øt h√†m t·∫°o Boy c√≥ c√°c thu·ªôc t√≠nh v√† ph∆∞∆°ng th·ª©c t√πy √Ω 
let boy = {
    height: 180,
    weight: 80,
    hair() {
        console.log("black hair")
    }
}